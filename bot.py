import logging
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import config  # <-- –∏–º–ø–æ—Ä—Ç –∏–∑ config.py

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ ---
TOKEN = config.TOKEN
ADMIN_IDS = set(config.ADMIN_IDS)
WHITELISTED_USER_IDS = set(config.WHITELISTED_USER_IDS)
WORDS_FILE = "banned_words.txt"

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ ---
def load_banned_words() -> list:
    patterns = []
    try:
        with open(WORDS_FILE, "r", encoding="utf-8") as f:
            for line in f:
                word = line.strip()
                if word and not word.startswith("#"):
                    if any(c in word for c in ('\\b', '\\w', '^', '$', r'\d')):
                        pattern = word
                    else:
                        pattern = f'\\b{re.escape(word)}\\b'
                    patterns.append(re.compile(pattern, re.IGNORECASE))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤: {e}")
    return patterns

def save_banned_word(word: str):
    with open(WORDS_FILE, "a", encoding="utf-8") as f:
        f.write(f"{word}\n")

banned_patterns = load_banned_words()

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ°Ô∏è –ë–æ—Ç —Å–ª–µ–∂–µ–Ω–∏—è –∑–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∞–∫—Ç–∏–≤–µ–Ω.\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /banword."
    )

async def banword(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    if not context.args:
        await update.message.reply_text("üìå –ü—Ä–∏–º–µ—Ä: /banword –∫–∞–∑–∏–Ω–æ")
        return

    word = ' '.join(context.args)
    save_banned_word(word)
    global banned_patterns
    banned_patterns = load_banned_words()

    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: `{word}`", parse_mode='Markdown')
    logger.info(f"–ê–¥–º–∏–Ω {user_id} –¥–æ–±–∞–≤–∏–ª: {word}")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def check_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat = message.chat
    user = message.from_user

    if chat.type not in ['group', 'supergroup']:
        return

    if user.id in WHITELISTED_USER_IDS:
        return

    text = (message.text or message.caption or "").strip()
    if not text:
        return

    for pattern in banned_patterns:
        if pattern.search(text):
            matched = pattern.pattern
            try:
                await context.bot.ban_chat_member(chat_id=chat.id, user_id=user.id)
                await message.reply_text(
                    f"üö´ @{user.username or user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: `{matched}`",
                    parse_mode='Markdown'
                )
                logger.info(f"–ó–∞–±–∞–Ω–µ–Ω {user.id} –∑–∞: {matched}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞ {user.id}: {e}")
            break

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    global banned_patterns
    banned_patterns = load_banned_words()
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(banned_patterns)} —à–∞–±–ª–æ–Ω–æ–≤.")

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("banword", banword))
    app.add_handler(MessageHandler(filters.ALL, check_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
